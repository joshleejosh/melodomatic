# MELODOMATIC is controlled by a script file.

# The script must contain at least one SCALE and one VOICE.
# When this is not true, the program ends.

# A leading ':' denotes a directive.
# Lines after a directive are part of that data structure.
# A '@' denotes a macro string.
# A '@' in the context of a data structure will be replaced by its macro.
# A '#' denotes a comment.
# Blank lines are ignored.

### PREPROCESSING ################################################

# You can include another file. It gets pasted in verbatim before the script is processed.
# Hotloading will only occur when *this* file is updated, though.
:include melodomatic_include.txt

# Macros are direct text substitutions.
@major_pentatonic 0 2 4 7 9 12
@quarter_quarter_half 1 	1  	2 # whitespace will be scrubbed, as will this comment.

### SCALES ################################################
# A scale defines the pitches that can be played by a voice.
# A set of linked scales forms a directed graph of chord changes.

:scale FMaj    # Scale ID is a string
65             # ROOT pitch is an integer midi note value (0-129)
0 2 4 7 9 12   # Scale INTERVALS are relative to the root pitch. This forms the
               # pool of pitches that a voice picks from to generate its
               # sequence.
BbMaj C7       # LINKS are ids of other scales that the player can transition to.
               # The player switches between scales periodically. If there are
               # no links, the player will just stay here forever. Invalid
               # links will be thrown away.

:scale BbMaj
70
@major_pentatonic
FMaj C7

:scale C7
72
0 2 4 7 10 12
FMaj BbMaj


### VOICES ################################################
# A voice generates a sequence of notes (using the player's current scale).
# The player plays all voices simultaneously.

:voice Tenor  # Voice ID is a string.
-12           # OFFSET is added to whatever pitch we get from the scale.
              # Usually this will be a multiple of 12 for shifting up/down
              # octaves.
1 2 2 4 -1 -2 # DURATIONS are a pool of values (measured in beats) that are
              # randomly picked from to determine how long a note will play
              # for. More entries means the value will be picked more often.
              # Negative durations are rests.
48 64 80      # VELOCITIES are MIDI values (0-127). The voice will
              # periodically shift up and down the series of values.

:voice Alto
0
4 @quarter_quarter_half @quarter_quarter_half -1 -2
48 64 80 96

:voice Soprano
12
.5 .5 1 1 1 2 -.5 -1
32 48


# A LOOP is a voice that plays a specific sequence instead of generating random notes.
:loop Bass
-24              # OFFSET is used the same way as in regular voices.
 0    4     40   # Each line is a STEP in the sequence, consisting of PITCH, DURATION, and VELOCITY.
                 # Pitch is relative to the current scale's root.
                 # Duration is in beats.
                 # Velocity is a MIDI value.
 7               # If duration or velocity are unspecified, they repeat the previous step's value.
 0    4     56
 .    2          # A '.' for a pitch represents a rest.
 7    2

# A HARMONY is a voice that plays in unison with another voice, but with its pitch shifted.
:harmony BassH   # ID of the harmony voice.
Bass             # ID of the root voice this will play along with.
                 # This can be a voice or loop, but not another harmony.
-12              # Pitch offset from the root voice.
0                # Step offset from the root voice. This counts up or down the
                 # scale's interval series. Behavior can get pretty janky
                 # when it runs off the end and tries to wrap around.
-8               # Velocity offset from the root voice.


### OTHER DIRECTIVES (all optional) ########################

# Tempo
:beats_per_minute 108

# Define the smallest fraction of a beat that we can play.
# This is used to derive the rate of processing, so very large numbers lead to
# very small time slices, which could lead to choppy performance.
# On the other hand, too few pulses risks dropping/overlapping short notes.
# So you should probably just not play with this. (Default is 8)
:pulses_per_beat 4

# Define how often (in beats) the reader should check for changes in this script file.
:reload_interval 4

# A list of possible periods (in beats) between scale changes.
:scale_change_times @sixteen 32

# Which scale the player should start on when the file is first loaded.
# By default, the player will start with the first scale in the file.
# When the file is hotloaded, this will override any current scale change.
:scale_first FMaj

# Whenever a voice plays a note, this is the chance that it will also change velocity.
# Velocity changes are always one step up or down the voice's velocity list.
:velocity_change_chance .20


